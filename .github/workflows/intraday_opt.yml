name: intraday-options-paper
on:
  workflow_dispatch:

jobs:
  run:
    runs-on: ubuntu-latest

    # Raw (possibly messy) secrets
    env:
      RAW_ZERODHA_API_KEY:      ${{ secrets.ZERODHA_API_KEY }}
      RAW_ZERODHA_API_SECRET:   ${{ secrets.ZERODHA_API_SECRET }}
      RAW_ZERODHA_ACCESS_TOKEN: ${{ secrets.ZERODHA_ACCESS_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 1) SANITIZE secrets (strip spaces, tabs, newlines, CRLF) and re-export
      - name: Sanitize Zerodha secrets
        shell: bash
        run: |
          clean() { printf "%s" "$1" | tr -d '\r\n\t ' ; }
          API_KEY_CLEAN=$(clean "$RAW_ZERODHA_API_KEY")
          API_SECRET_CLEAN=$(clean "$RAW_ZERODHA_API_SECRET")
          ACCESS_TOKEN_CLEAN=$(clean "$RAW_ZERODHA_ACCESS_TOKEN")

          echo "ZERODHA_API_KEY=$API_KEY_CLEAN"           >> $GITHUB_ENV
          echo "ZERODHA_API_SECRET=$API_SECRET_CLEAN"     >> $GITHUB_ENV
          echo "ZERODHA_ACCESS_TOKEN=$ACCESS_TOKEN_CLEAN" >> $GITHUB_ENV

          # Safe fingerprints (first 6 chars) to confirm we’re using what you think
          echo "API_KEY_FP=${API_KEY_CLEAN:0:6}"           >> $GITHUB_ENV
          echo "ACCESS_TOKEN_FP=${ACCESS_TOKEN_CLEAN:0:6}" >> $GITHUB_ENV

      - name: Show safe fingerprints
        run: |
          echo "Using API key starting with: $API_KEY_FP"
          echo "Using Access token starting with: $ACCESS_TOKEN_FP"

      # 2) PREFLIGHT with the SAME sanitized env that runner will use
      - name: Preflight Zerodha credentials
        run: |
          python - <<'PY'
          import os, sys
          from kiteconnect import KiteConnect

          api_key = (os.getenv("ZERODHA_API_KEY") or "").strip()
          access  = (os.getenv("ZERODHA_ACCESS_TOKEN") or "").strip()

          print("API len:", len(api_key), "| TOKEN len:", len(access))
          if len(api_key) < 6 or len(access) < 10:
              print("❌ Missing API key or Access token after sanitize.")
              sys.exit(2)

          kite = KiteConnect(api_key=api_key)
          kite.set_access_token(access)
          try:
              prof = kite.profile()
              print("✅ Zerodha profile OK:", prof.get("user_id"), prof.get("user_name"))
          except Exception as e:
              print("❌ Zerodha preflight failed:", e)
              sys.exit(3)
          PY

      # 3) Run your intraday script (make sure filename matches your repo)
      - name: Run intraday options (paper)
        run: |
          python runner_intraday_options.py --out_dir "./reports"

      - name: Upload reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: reports
          path: reports/

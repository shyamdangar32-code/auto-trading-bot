name: Multi-day Backtest

on:
  workflow_dispatch:
    inputs:
      start:
        description: "Start date (YYYY-MM-DD)"
        required: true
        default: "2025-09-08"
      end:
        description: "End date (YYYY-MM-DD) — exclusive (next day)"
        required: true
        default: "2025-09-13"
      underlying:
        description: "Symbol (NIFTY / BANKNIFTY)"
        required: true
        default: "NIFTY"
      interval:
        description: "Interval (e.g., 1m, 3m, 5m, 15m)"
        required: true
        default: "1m"
      capital_rs:
        description: "Capital (₹)"
        required: true
        default: "100000"
      order_qty:
        description: "Fallback order qty"
        required: true
        default: "1"

jobs:
  run-multiday:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        profile: [loose, medium, strict]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Compute date list
        id: daterange
        shell: bash
        run: |
          python - <<'PY'
          import os, datetime as dt
          s = dt.date.fromisoformat(os.environ["INPUT_START"])
          e = dt.date.fromisoformat(os.environ["INPUT_END"])
          if not s < e:
            raise SystemExit("start must be < end")
          days = []
          d = s
          while d < e:
            if d.weekday() < 5:  # skip Sat/Sun
              days.append(d.isoformat())
            d += dt.timedelta(days=1)
          out = ",".join(days)
          print("days="+out)
          with open(os.environ["GITHUB_OUTPUT"], "a") as f:
            f.write("days="+out+"\n")
          PY

      - name: Add repo to PYTHONPATH
        run: echo "PYTHONPATH=$PYTHONPATH:$(pwd)" >> $GITHUB_ENV

      - name: Run backtest for each day • ${{ matrix.profile }}
        env:
          ZERODHA_API_KEY: ${{ secrets.ZERODHA_API_KEY }}
          ZERODHA_ACCESS_TOKEN: ${{ secrets.ZERODHA_ACCESS_TOKEN }}
        shell: bash
        run: |
          IFS=',' read -ra DAYS <<< "${{ steps.daterange.outputs.days }}"
          for d in "${DAYS[@]}"; do
            nxt=$(python - <<PY
import datetime as dt, sys
d = dt.date.fromisoformat(sys.argv[1])
print((d+dt.timedelta(days=1)).isoformat())
PY
"$d")
            outdir="reports/${{ matrix.profile }}/$d"
            mkdir -p "$outdir"
            echo "▶ ${d} → ${nxt}  →  $outdir"
            python tools/run_backtest.py \
              --underlying "${{ inputs.underlying }}" \
              --start "$d" \
              --end   "$nxt" \
              --interval "${{ inputs.interval }}" \
              --capital_rs "${{ inputs.capital_rs }}" \
              --order_qty "${{ inputs.order_qty }}" \
              --outdir "$outdir" \
              --use_block "backtest_${{ matrix.profile }}"
          done

      - name: Upload artifacts (all days • ${{ matrix.profile }})
        uses: actions/upload-artifact@v4
        with:
          name: multi-day-${{ matrix.profile }}-${{ inputs.start }}-to-${{ inputs.end }}
          path: reports/${{ matrix.profile }}/*
          if-no-files-found: error

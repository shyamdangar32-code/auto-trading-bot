name: daily-trade-run

on:
  workflow_dispatch: {}
  schedule:
    - cron: "20 10 * * 1-5"   # 10:20 UTC, Mon–Fri

concurrency:
  group: daily-trade-run-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install --prefer-binary -r requirements.txt

      # No request-token refresh step anymore (fully automatic)

      - name: Telegram diagnostics (temp)
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID:   ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          set -eux
          TURL="https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}"

          echo "Token prefix: ${TELEGRAM_BOT_TOKEN:0:7}***"
          echo "CHAT_ID: ${TELEGRAM_CHAT_ID}"

          echo "1) getMe -> checks token"
          curl -s "$TURL/getMe" | tee me.json

          echo "2) getUpdates -> send /start to your bot first"
          curl -s "$TURL/getUpdates" | tee updates.json

          echo "3) sendMessage -> tries your current CHAT_ID"
          RESP=$(curl -s -w "\n%{http_code}" -X POST "$TURL/sendMessage" \
            -d chat_id="$TELEGRAM_CHAT_ID" \
            -d text="✅ Test from GitHub Actions $(date -u +'%Y-%m-%d %H:%M:%SZ')")
          BODY=$(echo "$RESP" | head -n1)
          CODE=$(echo "$RESP" | tail -n1)
          echo "HTTP: $CODE"
          echo "$BODY"
          test "$CODE" = "200" || (echo "sendMessage failed"; exit 1)

      - name: Run strategy (Zerodha first; graceful Yahoo fallback)
        env:
          TELEGRAM_BOT_TOKEN:   ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID:     ${{ secrets.TELEGRAM_CHAT_ID }}
          ZERODHA_API_KEY:      ${{ secrets.ZERODHA_API_KEY }}
          ZERODHA_API_SECRET:   ${{ secrets.ZERODHA_API_SECRET }}
          ZERODHA_ACCESS_TOKEN: ${{ secrets.ZERODHA_ACCESS_TOKEN }}
          # Optional: fallback symbol to use ONLY when Yahoo is needed
          YAHOO_FALLBACK_SYMBOL: "RELIANCE.NS"
        run: |
          python runner.py --out_dir "./reports"

      - name: Upload reports as artifact
        uses: actions/upload-artifact@v4
        with:
          name: reports
          path: reports/*

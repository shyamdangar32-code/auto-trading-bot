name: backtest

on:
  push:
  workflow_dispatch:
    inputs:
      underlying:
        description: "UNDERLYING (e.g., NIFTY, BANKNIFTY)"
        required: false
        default: "BANKNIFTY"
      start:
        description: "Start date (YYYY-MM-DD)"
        required: false
        default: ""
      end:
        description: "End date (YYYY-MM-DD)"
        required: false
        default: ""
      interval:
        description: "Candle interval (1m/5m/15m/1d)"
        required: false
        default: "5m"
      capital_rs:
        description: "Starting capital (₹)"
        required: false
        default: "100000"
      order_qty:
        description: "Order quantity"
        required: false
        default: "1"
      slippage_bps:
        description: "Slippage in bps (e.g., 5 = 0.05%)"
        required: false
        default: "0"
      broker_flat:
        description: "Broker flat fee (₹ per order)"
        required: false
        default: "0"
      broker_pct:
        description: "Brokerage percent (e.g., 0.02 for 0.02%)"
        required: false
        default: "0"
      max_trades_per_day:
        description: "Hard cap on daily trades (0 = unlimited)"
        required: false
        default: "0"

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Add repo to PYTHONPATH
        run: echo "PYTHONPATH=$GITHUB_WORKSPACE" >> "$GITHUB_ENV"

      - name: Run backtest
        env:
          # pick values from workflow_dispatch when present; else sensible defaults
          UNDERLYING: ${{ github.event.inputs.underlying || 'BANKNIFTY' }}
          START: ${{ github.event.inputs.start || '' }}
          END: ${{ github.event.inputs.end || '' }}
          INTERVAL: ${{ github.event.inputs.interval || '5m' }}
          CAPITAL_RS: ${{ github.event.inputs.capital_rs || '100000' }}
          ORDER_QTY: ${{ github.event.inputs.order_qty || '1' }}
          SLIPPAGE_BPS: ${{ github.event.inputs.slippage_bps || '0' }}
          BROKER_FLAT: ${{ github.event.inputs.broker_flat || '0' }}
          BROKER_PCT: ${{ github.event.inputs.broker_pct || '0' }}
          MAX_TRADES_PER_DAY: ${{ github.event.inputs.max_trades_per_day || '0' }}
        run: |
          set -eo pipefail
          mkdir -p "./reports" "logs"

          echo "▶ Launching real backtest…"
          # NOTE: tools/run_backtest.py must accept these flags; we only pass what it knows.
          python tools/run_backtest.py \
            --underlying "${UNDERLYING}" \
            --start "${START}" \
            --end "${END}" \
            --interval "${INTERVAL}" \
            --capital_rs "${CAPITAL_RS}" \
            --order_qty "${ORDER_QTY}" \
            --slippage_bps "${SLIPPAGE_BPS}" \
            --broker_flat "${BROKER_FLAT}" \
            --broker_pct "${BROKER_PCT}" \
            --max_trades_per_day "${MAX_TRADES_PER_DAY}" \
            --outdir "./reports" \
          || { echo "WARN: real backtest failed → writing minimal reports"; }

      - name: Ensure minimal report (never send 'No summary')
        run: |
          python tools/ensure_report.py --dir "./reports" --note "No data; runner fallback."

      - name: Upload artifacts (reports + logs)
        uses: actions/upload-artifact@v4
        with:
          name: backtest-artifacts
          path: |
            reports/**
            logs/**
          if-no-files-found: warn
          retention-days: 7

      - name: Notify Telegram (summary + charts)
        if: ${{ secrets.TELEGRAM_BOT_TOKEN != '' && secrets.TELEGRAM_CHAT_ID != '' }}
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          python tools/telegram_notify.py --dir "./reports" --title "Backtest Results"

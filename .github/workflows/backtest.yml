name: Backtest

on:
  # Manual trigger (recommended while developing)
  workflow_dispatch:
    inputs:
      profiles:
        description: "Profiles to run (comma-separated: loose,medium,strict)"
        required: false
        default: "loose,medium,strict"
  # Nightly / trading days (optional)
  schedule:
    - cron: "15 4 * * 1-5"   # Mon–Fri ~09:45 IST
  # Push trigger (kept, but safe)
  push:
    branches: [ main ]
    paths:
      - ".github/workflows/backtest.yml"
      - "bot/**"
      - "tools/**"
      - "strategies/**"
      - "config.yaml"
      - "requirements.txt"

# ✅ Only one run per branch; older in-progress runs are cancelled (not 'failed')
concurrency:
  group: backtest-${{ github.ref }}
  cancel-in-progress: true

jobs:
  run-backtest:
    # Skip auto run on pushes that explicitly opt out
    if: ${{ github.event_name == 'workflow_dispatch' || !contains(github.event.head_commit.message, '[skip bt]') }}
    runs-on: ubuntu-latest
    timeout-minutes: 90

    strategy:
      fail-fast: false
      matrix:
        profile: ${{ fromJson('["loose","medium","strict"]') }}

    env:
      ZERODHA_API_KEY:      ${{ secrets.ZERODHA_API_KEY }}
      ZERODHA_ACCESS_TOKEN: ${{ secrets.ZERODHA_ACCESS_TOKEN }}
      TELEGRAM_BOT_TOKEN:   ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID:     ${{ secrets.TELEGRAM_CHAT_ID }}
      UNDERLYING: NIFTY
      INTERVAL: "1m"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Compute date range
        id: dates
        run: |
          # 365 days for manual runs; for schedule keep same
          END=$(date -u +%F)
          START=$(date -u -d "$END -365 days" +%F)
          echo "start=$START" >> "$GITHUB_OUTPUT"
          echo "end=$END"   >> "$GITHUB_OUTPUT"

      - name: Run backtest (${{ matrix.profile }})
        run: |
          mkdir -p reports logs
          python -m tools.run_backtest \
            --underlying "${UNDERLYING}" \
            --start "${{ steps.dates.outputs.start }}" \
            --end   "${{ steps.dates.outputs.end }}" \
            --interval "${INTERVAL}" \
            --capital_rs 100000 \
            --order_qty 1 \
            --profile "${{ matrix.profile }}" \
            --outdir "./reports_${{ matrix.profile }}"

      - name: Upload artifacts (${{ matrix.profile }})
        uses: actions/upload-artifact@v4
        with:
          name: backtest-artifacts-${{ matrix.profile }}
          path: reports_${{ matrix.profile }}/**

      - name: Telegram summary (${{ matrix.profile }})
        if: ${{ success() && env.TELEGRAM_BOT_TOKEN != '' && env.TELEGRAM_CHAT_ID != '' }}
        env:
          START: ${{ steps.dates.outputs.start }}
          END:   ${{ steps.dates.outputs.end }}
          PROFILE: ${{ matrix.profile }}
        run: |
          python - <<'PY'
          import json, os, pathlib
          prof = os.environ["PROFILE"]
          m = json.load(open(f"reports_{prof}/metrics.json","r",encoding="utf-8"))
          und=os.environ.get("UNDERLYING","NIFTY"); itv=os.environ.get("INTERVAL","1m")
          start=os.environ.get("START",""); end=os.environ.get("END","")
          lines = [
            f"Backtest Summary (SUCCESS) — profile: {prof}",
            f"Underlying: {und}   Interval: {itv}",
            f"Period: {start} -> {end}",
            f"Trades: {m.get('n_trades',0)}   Win-rate: {m.get('win_rate',0)}%",
            f"ROI: {m.get('roi_pct',0)}%   PF: {m.get('profit_factor',0)}",
            f"R:R: {m.get('rr',0)}   Sharpe: {m.get('sharpe_ratio',0)}",
            f"Max DD: {m.get('max_dd_pct',0)}%   Time DD: {m.get('time_dd_bars',0)} bars",
          ]
          payload = {"chat_id": os.environ["TELEGRAM_CHAT_ID"], "text": "\n".join(lines)}
          pathlib.Path("payload.json").write_text(json.dumps(payload, ensure_ascii=False), encoding="utf-8")
          PY
          curl -s -X POST -H "Content-Type: application/json" \
               -d @payload.json \
               "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" >/dev/null
          for img in equity_curve.png drawdown.png; do
            if [ -f "reports_${PROFILE}/$img" ]; then
              curl -s -F chat_id="${TELEGRAM_CHAT_ID}" -F photo="@reports_${PROFILE}/$img" \
                "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendPhoto" >/dev/null
            fi
          done

      - name: Run backtest + Telegram notify
        run: |
          python - <<'PY'
          import os, json, sys
          from datetime import datetime, timedelta
          import pandas as pd
          import requests

          from kiteconnect import KiteConnect
          from bot.backtest import run_backtest, save_reports

          # ----------------- constants -----------------
          INDEX_TOKENS = {"NIFTY": 256265, "BANKNIFTY": 260105}
          INTERVAL_MAP = {
              "1m": "minute", "3m": "3minute", "5m": "5minute",
              "10m": "10minute", "15m": "15minute", "30m": "30minute",
              "60m": "60minute", "1d": "day", "day": "day"
          }

          def get_kite():
            api_key = (os.getenv("ZERODHA_API_KEY") or "").strip()
            access  = (os.getenv("ZERODHA_ACCESS_TOKEN") or "").strip()
            if not api_key or not access:
              sys.exit("❌ Missing ZERODHA_API_KEY / ZERODHA_ACCESS_TOKEN (set repo secrets).")
            kite = KiteConnect(api_key=api_key)
            kite.set_access_token(access)
            try:
              prof = kite.profile()
              print("✅ Zerodha token OK for:", prof.get("user_name", "unknown"))
            except Exception as e:
              sys.exit(f"❌ Token/profile check failed: {e}")
            return kite

          def fetch_index_ohlc(kite, token, start_dt, end_dt, iv):
            # Kite requires NAIVE datetimes (no tzinfo)
            if start_dt.tzinfo or end_dt.tzinfo:
              raise SystemExit("❌ Start/End must be naive datetimes (no tzinfo).")
            iv = INTERVAL_MAP.get(iv, "5minute")
            try:
              data = kite.historical_data(token, start_dt, end_dt, iv)
            except Exception as e:
              # Most common: 403 if Historical Data add-on not enabled
              raise SystemExit(f"❌ historical_data failed (interval={iv}). "
                               f"Likely causes: no Historical add-on / token expired / bad range. Error: {e}")
            df = pd.DataFrame(data or [])
            if df.empty:
              raise SystemExit("❌ No historical data returned. Check instrument, dates, add-on & interval.")
            df.rename(columns={"date":"Date","open":"Open","high":"High","low":"Low","close":"Close","volume":"Volume"}, inplace=True)
            df["Date"] = pd.to_datetime(df["Date"])
            return df

          def send_telegram(text):
            tok = os.getenv("TELEGRAM_BOT_TOKEN","").strip()
            chat= os.getenv("TELEGRAM_CHAT_ID","").strip()
            if not tok or not chat:
              print("ℹ️ Telegram not configured; skipping.")
              return
            try:
              requests.get(f"https://api.telegram.org/bot{tok}/sendMessage",
                           params={"chat_id": chat, "text": text, "parse_mode": "HTML"},
                           timeout=10)
              print("✅ Telegram sent.")
            except Exception as e:
              print("⚠️ Telegram failed:", e)

          # ----------------- inputs -----------------
          gh = ${{
            toJson(github.event.inputs)
          }}
          sym    = (gh.get("underlying") or "BANKNIFTY").upper()
          iv     = (gh.get("interval") or "5m").lower()
          # NAIVE datetimes – no tzinfo
          start  = datetime.strptime(gh.get("start_date"), "%Y-%m-%d")
          end    = datetime.strptime(gh.get("end_date"),   "%Y-%m-%d") + timedelta(hours=23, minutes=59)

          cfg = {
            "capital_rs": float(gh.get("capital_rs") or 100000),
            "order_qty": int(gh.get("order_qty") or 1),
            "leg_sl_percent": float(gh.get("leg_sl_percent") or 25),
            "combined_target_percent": float(gh.get("combined_target_percent") or 0),
            "reentry_max": int(gh.get("reentry_max") or 0),
            "reentry_cooldown": int(gh.get("reentry_cooldown") or 0),
            "trailing_enabled": (str(gh.get("trailing_enabled")).lower()=="true"),
            "trail_type": gh.get("trail_type") or "atr",
            "trail_atr_mult": float(gh.get("trail_atr_mult") or 1.5),
            "adx_min": int(gh.get("adx_min") or 10),
          }

          print(f"▶ Underlying={sym}  Interval={iv}  Range={start.date()}→{end.date()}")
          token = INDEX_TOKENS.get(sym)
          if not token:
            sys.exit(f"❌ Unsupported underlying: {sym}")

          kite = get_kite()
          prices = fetch_index_ohlc(kite, token, start, end, iv)
          print(f"✅ Got {len(prices)} bars.")

          # ----------------- backtest -----------------
          print("▶ Running backtest…")
          summary, trades, equity = run_backtest(prices, cfg)

          out_dir = "./reports"
          os.makedirs(out_dir, exist_ok=True)
          save_reports(out_dir, summary, trades, equity)
          print("📦 Wrote reports to ./reports (latest.json, latest_signals.csv etc.)")

          if (str(gh.get("telegram_notify")).lower()=="true"):
            txt = (
              "📊 <b>Backtest Summary</b>\n"
              f"• Index: <b>{sym}</b> | {start.date()} → {end.date()}\n"
              f"• Bars: {len(prices)} | Interval: {iv}\n"
              f"• Trades: <b>{summary.get('n_trades',0)}</b>\n"
              f"• Win-rate: <b>{summary.get('win_rate',0)}%</b>\n"
              f"• ROI: <b>{summary.get('roi_pct',0)}%</b>\n"
              f"• Max DD: <b>{summary.get('max_dd_pct',0)}%</b>"
            )
            send_telegram(txt)
          PY

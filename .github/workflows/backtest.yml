name: Backtest

on:
  workflow_dispatch:
    inputs:
      start:
        description: "Start date (YYYY-MM-DD) — ખાલી રાખો તો auto=last 365 days"
        required: false
        default: ""
      end:
        description: "End date (YYYY-MM-DD) — ખાલી રાખો તો today (UTC)"
        required: false
        default: ""
      underlying:
        description: "Symbol (NIFTY / BANKNIFTY)"
        required: true
        default: "NIFTY"
      interval:
        description: "Interval (e.g., 1m, 3m, 5m, 15m)"
        required: true
        default: "1m"
      capital_rs:
        description: "Capital (₹)"
        required: true
        default: "100000"
      order_qty:
        description: "Fallback order qty"
        required: true
        default: "1"

jobs:
  run-backtest:
    name: Run backtest (${{ matrix.profile }})
    runs-on: ubuntu-latest
    timeout-minutes: 60

    strategy:
      fail-fast: false
      matrix:
        profile: [loose, medium, strict]

    env:
      # --- Secrets ---
      ZERODHA_API_KEY:       ${{ secrets.ZERODHA_API_KEY }}
      ZERODHA_API_SECRET:    ${{ secrets.ZERODHA_API_SECRET }}
      ZERODHA_ACCESS_TOKEN:  ${{ secrets.ZERODHA_ACCESS_TOKEN }}
      TELEGRAM_BOT_TOKEN:    ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID:      ${{ secrets.TELEGRAM_CHAT_ID }}

      # --- From inputs (fallbacks) ---
      UNDERLYING: ${{ inputs.underlying || 'NIFTY' }}
      INTERVAL:   ${{ inputs.interval   || '1m' }}
      CAPITAL_RS: ${{ inputs.capital_rs || 100000 }}
      ORDER_QTY:  ${{ inputs.order_qty  || 1 }}

      PIP_DISABLE_PIP_VERSION_CHECK: "1"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          python -c "import sys, pandas, numpy; print('✅ Versions:', sys.version.split()[0], 'pandas', pandas.__version__, 'numpy', numpy.__version__)"

      - name: Make repo importable
        run: echo "PYTHONPATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV

      - name: Compute date range (inputs → fallback last 365 days)
        id: dates
        shell: bash
        run: |
          python - <<'PY'
          import os, datetime as dt
          s_in = os.getenv('INPUT_START','').strip()
          e_in = os.getenv('INPUT_END','').strip()

          # end = today if not provided
          end = dt.datetime.utcnow().date() if not e_in else dt.date.fromisoformat(e_in)
          # start = provided or (end - 365d)
          start = dt.date.fromisoformat(s_in) if s_in else (end - dt.timedelta(days=365))

          if start >= end:
            raise SystemExit(f"start must be < end (got {start} .. {end})")

          with open(os.environ['GITHUB_OUTPUT'],'a') as f:
            f.write(f"start={start.isoformat()}\n")
            f.write(f"end={end.isoformat()}\n")

          print(f"Using range: {start} -> {end}")
          PY

      - name: Run backtest (${{ matrix.profile }})
        run: |
          mkdir -p reports logs
          python -m tools.run_backtest \
            --underlying "${UNDERLYING}" \
            --start "${{ steps.dates.outputs.start }}" \
            --end   "${{ steps.dates.outputs.end }}" \
            --interval "${INTERVAL}" \
            --capital_rs "${CAPITAL_RS}" \
            --order_qty "${ORDER_QTY}" \
            --outdir "./reports/${{ matrix.profile }}" \
            --use_block "backtest_${{ matrix.profile }}"

      - name: Upload artifacts (${{ matrix.profile }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backtest-artifacts-${{ matrix.profile }}
          path: |
            reports/${{ matrix.profile }}/**
            logs/**
          if-no-files-found: warn
          retention-days: 7

      - name: Telegram summary (${{ matrix.profile }})
        if: ${{ success() && env.TELEGRAM_BOT_TOKEN != '' && env.TELEGRAM_CHAT_ID != '' }}
        run: |
          python tools/telegram_notify.py \
            --dir "./reports/${{ matrix.profile }}" \
            --title "Backtest ${{ matrix.profile }} • ${UNDERLYING} • ${INTERVAL}"

  compare:
    name: Compare (loose vs medium vs strict)
    runs-on: ubuntu-latest
    needs: run-backtest
    if: ${{ always() }}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Compose comparison text
        run: |
          python - <<'PY'
          import json, glob, pathlib
          rows=[]
          for prof in ['loose','medium','strict']:
              p = glob.glob(f"artifacts/backtest-artifacts-{prof}/**/metrics.json", recursive=True)
              if not p:
                  rows.append(f"{prof}: (no metrics)")
                  continue
              m = json.load(open(p[0],'r',encoding='utf-8'))
              rows.append(
                f"{prof}: trades={m.get('n_trades',0)} | "
                f"win%={m.get('win_rate',0)} | PF={m.get('profit_factor',0)} | "
                f"R:R={m.get('rr',0)} | ROI%={m.get('roi_pct',0)} | DD%={m.get('max_dd_pct',0)}"
              )
          txt = "Backtest Comparison (loose | medium | strict)\n" + "\n".join(rows)
          pathlib.Path("comparison.txt").write_text(txt, encoding="utf-8")
          PY

      - name: Upload comparison
        uses: actions/upload-artifact@v4
        with:
          name: backtest-comparison
          path: comparison.txt
          if-no-files-found: warn

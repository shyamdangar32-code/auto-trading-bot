name: Backtest

# ✅ Manual only
on:
  workflow_dispatch: {}

jobs:
  run-backtest:
    name: Run backtest (${{ matrix.profile }})
    runs-on: ubuntu-latest
    timeout-minutes: 60

    strategy:
      fail-fast: false
      matrix:
        profile: [loose, medium, strict]

    env:
      # --- Secrets (repo → Settings → Secrets and variables → Actions) ---
      ZERODHA_API_KEY:       ${{ secrets.ZERODHA_API_KEY }}
      ZERODHA_API_SECRET:    ${{ secrets.ZERODHA_API_SECRET }}
      ZERODHA_ACCESS_TOKEN:  ${{ secrets.ZERODHA_ACCESS_TOKEN }}
      TELEGRAM_BOT_TOKEN:    ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID:      ${{ secrets.TELEGRAM_CHAT_ID }}

      # --- Default run params ---
      UNDERLYING: NIFTY
      INTERVAL: "1m"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Make repo importable
        run: echo "PYTHONPATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV

      - name: Compute date range (last 365 days)
        id: dates
        shell: bash
        run: |
          END=$(date -u +%F)
          START=$(date -u -d "$END -365 days" +%F)
          echo "start=$START" >> "$GITHUB_OUTPUT"
          echo "end=$END"   >> "$GITHUB_OUTPUT"

      - name: Run backtest (${{ matrix.profile }})
        run: |
          mkdir -p reports logs
          python -m tools.run_backtest \
            --underlying "${UNDERLYING}" \
            --start "${{ steps.dates.outputs.start }}" \
            --end   "${{ steps.dates.outputs.end }}" \
            --interval "${INTERVAL}" \
            --capital_rs 100000 \
            --order_qty 1 \
            --outdir "./reports/${{ matrix.profile }}" \
            --use_block "backtest_${{ matrix.profile }}"

      - name: Upload artifacts (${{ matrix.profile }})
        uses: actions/upload-artifact@v4
        with:
          name: backtest-artifacts-${{ matrix.profile }}
          path: |
            reports/${{ matrix.profile }}/**
            logs/**
          if-no-files-found: warn
          retention-days: 7

      - name: Telegram summary (${{ matrix.profile }})
        if: ${{ success() && env.TELEGRAM_BOT_TOKEN != '' && env.TELEGRAM_CHAT_ID != '' }}
        run: |
          python tools/telegram_notify.py \
            --dir "./reports/${{ matrix.profile }}" \
            --title "Backtest ${{ matrix.profile }} • ${UNDERLYING} • ${INTERVAL}"

  compare:
    name: Compare (loose vs medium vs strict)
    runs-on: ubuntu-latest
    needs: run-backtest
    if: ${{ always() }}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Compose comparison text
        run: |
          python - <<'PY'
          import json, glob, pathlib
          rows=[]
          for prof in ['loose','medium','strict']:
              p = glob.glob(f"artifacts/backtest-artifacts-{prof}/**/metrics.json", recursive=True)
              if not p: continue
              m = json.load(open(p[0],'r',encoding='utf-8'))
              rows.append(f"{prof}: {m.get('n_trades',0)} | win%={m.get('win_rate',0)} | PF={m.get('profit_factor',0)} | R:R={m.get('rr',0)} | ROI%={m.get('roi_pct',0)} | DD%={m.get('max_dd_pct',0)}")
          txt="Backtest Comparison (loose | medium | strict)\n" + "\n".join(rows) if rows else "No metrics found."
          pathlib.Path("comparison.txt").write_text(txt, encoding="utf-8")
          PY

      - name: Upload comparison
        uses: actions/upload-artifact@v4
        with:
          name: backtest-comparison
          path: comparison.txt
          if-no-files-found: warn

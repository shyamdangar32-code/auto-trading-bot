name: Backtest

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]
    paths:
      - ".github/workflows/backtest.yml"
      - "bot/**"
      - "core_backtest/**"
      - "strategies/**"
      - "tools/**"
      - "requirements.txt"
  schedule:
    - cron: "15 4 * * 1-5"   # Mon–Fri ~09:45 IST (UTC 04:15)

jobs:
  run-backtest:
    name: Run backtest (${{ matrix.name }})
    runs-on: ubuntu-latest
    timeout-minutes: 60

    strategy:
      fail-fast: false
      matrix:
        include:
          - name: loose
            UNDERLYING: NIFTY
            INTERVAL: "1m"
            ARTIFACT: backtest-artifacts-loose
          - name: strict
            UNDERLYING: NIFTY
            INTERVAL: "1m"
            ARTIFACT: backtest-artifacts-strict

    env:
      # Secrets
      ZERODHA_API_KEY:       ${{ secrets.ZERODHA_API_KEY }}
      ZERODHA_API_SECRET:    ${{ secrets.ZERODHA_API_SECRET }}
      ZERODHA_ACCESS_TOKEN:  ${{ secrets.ZERODHA_ACCESS_TOKEN }}
      TELEGRAM_BOT_TOKEN:    ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID:      ${{ secrets.TELEGRAM_CHAT_ID }}
      # Matrix-provided
      UNDERLYING: ${{ matrix.UNDERLYING }}
      INTERVAL:   ${{ matrix.INTERVAL }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Make repo importable
        run: echo "PYTHONPATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV

      - name: Compute date range (last 30 days)
        id: dates
        shell: bash
        run: |
          END=$(date -u +%F)
          START=$(date -u -d "$END -30 days" +%F)
          echo "start=$START" >> "$GITHUB_OUTPUT"
          echo "end=$END"   >> "$GITHUB_OUTPUT"

      - name: Run backtest (${{ matrix.name }})
        run: |
          mkdir -p reports logs
          python -m tools.run_backtest \
            --underlying "${UNDERLYING}" \
            --start "${{ steps.dates.outputs.start }}" \
            --end   "${{ steps.dates.outputs.end }}" \
            --interval "${INTERVAL}" \
            --capital_rs 100000 \
            --order_qty 1 \
            --outdir ./reports

      - name: Upload artifacts (reports + logs)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.ARTIFACT }}
          path: |
            reports/**
            logs/**
          if-no-files-found: warn
          retention-days: 7

      # ---- Telegram: summary (text) ----
      - name: Notify Telegram (Summary)
        if: ${{ success() && env.TELEGRAM_BOT_TOKEN != '' && env.TELEGRAM_CHAT_ID != '' }}
        env:
          START: ${{ steps.dates.outputs.start }}
          END:   ${{ steps.dates.outputs.end }}
        run: |
          python - <<'PY'
          import json, os, pathlib
          m = json.load(open("reports/metrics.json","r",encoding="utf-8"))
          und   = os.environ.get("UNDERLYING","NIFTY")
          itv   = os.environ.get("INTERVAL","1m")
          start = os.environ.get("START","")
          end   = os.environ.get("END","")
          lines = [
            "Backtest Summary (SUCCESS)",
            f"Underlying: {und}   Interval: {itv}",
            f"Period: {start} -> {end}",
            f"Trades: {m.get('n_trades',0)}   Win-rate: {m.get('win_rate',0)}%",
            f"ROI: {m.get('roi_pct',0)}%   PF: {m.get('profit_factor',0)}",
            f"R:R: {m.get('rr',0)}   Sharpe: {m.get('sharpe_ratio',0)}",
            f"Max DD: {m.get('max_dd_pct',0)}%   Time DD: {m.get('time_dd_bars',0)} bars",
          ]
          pathlib.Path("tg_msg.txt").write_text("\n".join(lines), encoding="utf-8")
          PY

          curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
            -d chat_id="${TELEGRAM_CHAT_ID}" \
            --data-urlencode text@"tg_msg.txt"

      # ---- Telegram: charts + report.md (if present) ----
      - name: Notify Telegram (Charts)
        if: ${{ success() && env.TELEGRAM_BOT_TOKEN != '' && env.TELEGRAM_CHAT_ID != '' }}
        run: |
          if [ -f reports/equity_curve.png ]; then
            curl -s -F chat_id="${TELEGRAM_CHAT_ID}" -F photo="@reports/equity_curve.png" \
              "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendPhoto" >/dev/null
          fi
          if [ -f reports/drawdown.png ]; then
            curl -s -F chat_id="${TELEGRAM_CHAT_ID}" -F photo="@reports/drawdown.png" \
              "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendPhoto" >/dev/null
          fi
          if [ -f reports/report.md ]; then
            curl -s -F chat_id="${TELEGRAM_CHAT_ID}" -F document="@reports/report.md" \
              "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendDocument" >/dev/null
          fi

      - name: Notify Telegram (Failure)
        if: ${{ failure() && env.TELEGRAM_BOT_TOKEN != '' && env.TELEGRAM_CHAT_ID != '' }}
        run: |
          MSG="❌ Backtest FAILED (${UNDERLYING} ${INTERVAL})\nRepo: $GITHUB_REPOSITORY\nRun: $GITHUB_RUN_NUMBER\nCommit: $GITHUB_SHA"
          curl -s "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
            -d chat_id="${TELEGRAM_CHAT_ID}" \
            --data-urlencode text="$MSG" >/dev/null

  # =========================
  # Compare outputs from both runs and send one combined summary
  # =========================
  compare-and-notify:
    name: Compare (loose vs strict) + Telegram
    needs: run-backtest
    runs-on: ubuntu-latest
    if: ${{ always() }}

    env:
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID:   ${{ secrets.TELEGRAM_CHAT_ID }}
      UNDERLYING:         NIFTY
      INTERVAL:           "1m"

    steps:
      - name: Download artifacts (loose)
        uses: actions/download-artifact@v4
        with:
          name: backtest-artifacts-loose
          path: loose

      - name: Download artifacts (strict)
        uses: actions/download-artifact@v4
        with:
          name: backtest-artifacts-strict
          path: strict

      - name: Compare metrics & build summary
        id: cmp
        run: |
          python - <<'PY'
          import json, os, csv, pathlib, sys

          def read_metrics(root):
            p = pathlib.Path(root)/"reports"/"metrics.json"
            return json.loads(p.read_text("utf-8")) if p.exists() else None

          L = read_metrics("loose")
          S = read_metrics("strict")

          if not L and not S:
            print("::error::No metrics.json found in either artifact")
            sys.exit(1)

          def get(m, k): return (m or {}).get(k, 0)

          keys = ["n_trades","win_rate","roi_pct","profit_factor","rr",
                  "max_dd_pct","time_dd_bars","sharpe_ratio","avg_hold_minutes"]

          rows = [["metric","loose","strict","delta(strict-loose)"]]
          for k in keys:
            l = get(L,k); s = get(S,k)
            try: d = round((s or 0) - (l or 0), 4)
            except: d = ""
            rows.append([k, l, s, d])

          pathlib.Path("comparison.csv").write_text(
            "\n".join([",".join(map(str,r)) for r in rows]), "utf-8"
          )

          def line(title, k, fmt="{:.2f}"):
            lv = get(L,k); sv = get(S,k)
            def f(v):
              try: return fmt.format(float(v))
              except: return str(v)
            return f"{title}: loose={f(lv)} | strict={f(sv)}"

          summary = [
            "Backtest Comparison (loose vs strict)",
            f"Underlying: {os.environ.get('UNDERLYING','NIFTY')}   Interval: {os.environ.get('INTERVAL','1m')}",
            line("Trades", "n_trades", "{}"),
            line("Win-rate %", "win_rate"),
            line("ROI %", "roi_pct"),
            line("PF", "profit_factor"),
            line("R:R", "rr"),
            line("Max DD %", "max_dd_pct"),
            line("Time DD (bars)", "time_dd_bars", "{}"),
            line("Sharpe", "sharpe_ratio"),
            line("Avg hold (min)", "avg_hold_minutes"),
          ]
          pathlib.Path("tg_msg.txt").write_text("\n".join(summary), encoding="utf-8")
          PY

      - name: Upload comparison.csv
        uses: actions/upload-artifact@v4
        with:
          name: backtest-comparison
          path: comparison.csv
          if-no-files-found: error
          retention-days: 7

      - name: Send Telegram comparison
        if: ${{ env.TELEGRAM_BOT_TOKEN != '' && env.TELEGRAM_CHAT_ID != '' }}
        run: |
          curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
            -d chat_id="${TELEGRAM_CHAT_ID}" \
            --data-urlencode text@"tg_msg.txt" >/dev/null

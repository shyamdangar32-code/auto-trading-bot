name: Backtest

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]
    paths:
      - ".github/workflows/backtest.yml"
      - "bot/**"
      - "core_backtest/**"
      - "strategies/**"
      - "tools/**"
      - "requirements.txt"
  schedule:
    - cron: "15 4 * * 1-5"   # Mon–Fri @ 09:45 IST

jobs:
  run-backtest:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    # Zerodha + Telegram: Secrets → Env
    env:
      ZERODHA_API_KEY:       ${{ secrets.ZERODHA_API_KEY }}
      ZERODHA_API_SECRET:    ${{ secrets.ZERODHA_API_SECRET }}
      ZERODHA_ACCESS_TOKEN:  ${{ secrets.ZERODHA_ACCESS_TOKEN }}
      TELEGRAM_BOT_TOKEN:    ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID:      ${{ secrets.TELEGRAM_CHAT_ID }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      # !!! Important: make repo root importable so `bot` package resolves
      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV

      - name: Compute date range (last 30 calendar days)
        id: dates
        shell: bash
        run: |
          END=$(date -u +%F)
          START=$(date -u -d "$END -30 days" +%F)
          echo "start=$START" >> "$GITHUB_OUTPUT"
          echo "end=$END" >> "$GITHUB_OUTPUT"

      - name: Run backtest (NIFTY, 5m, Zerodha)
        run: |
          mkdir -p reports logs
          python -m tools.run_backtest \
            --underlying NIFTY \
            --start "${{ steps.dates.outputs.start }}" \
            --end   "${{ steps.dates.outputs.end }}" \
            --interval 5m \
            --capital_rs 100000 \
            --order_qty 1 \
            --outdir ./reports

      - name: Upload artifacts (reports + logs)
        uses: actions/upload-artifact@v4
        with:
          name: backtest-artifacts
          path: |
            reports/**
            logs/**
          if-no-files-found: warn
          retention-days: 7

      - name: Notify Telegram (Success)
        if: ${{ success() }}
        run: |
          MSG="✅ Backtest SUCCESS\nRepo: $GITHUB_REPOSITORY\nRun: $GITHUB_RUN_NUMBER\nCommit: $GITHUB_SHA"
          curl -s "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
            -d chat_id="${TELEGRAM_CHAT_ID}" \
            -d text="$MSG" > /dev/null

      - name: Notify Telegram (Failure)
        if: ${{ failure() }}
        run: |
          MSG="❌ Backtest FAILED\nRepo: $GITHUB_REPOSITORY\nRun: $GITHUB_RUN_NUMBER\nCommit: $GITHUB_SHA"
          curl -s "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
            -d chat_id="${TELEGRAM_CHAT_ID}" \
            -d text="$MSG" > /dev/null

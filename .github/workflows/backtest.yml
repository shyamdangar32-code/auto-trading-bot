name: backtest

on:
  workflow_dispatch:
    inputs:
      underlying:
        description: "NIFTY or BANKNIFTY"
        required: true
        default: "BANKNIFTY"
      start_date:
        description: "YYYY-MM-DD"
        required: true
        default: "2025-07-01"
      end_date:
        description: "YYYY-MM-DD"
        required: true
        default: "2025-08-01"
      interval:
        description: "1m,3m,5m,10m,15m"
        required: true
        default: "5m"
      capital_rs:
        required: true
        default: "100000"
      order_qty:
        required: true
        default: "1"
      mode:
        description: "offline (default) or online"
        required: true
        default: "offline"
      params_json:
        description: "Extra params as JSON (e.g. {\"leg_sl_percent\":25})"
        required: false
        default: "{}"

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    env:
      # Title used by ensure_metrics/telegram_notify to label Telegram cards
      REPORT_TITLE: "Backtest Summary"

      ZERODHA_API_KEY:      ${{ secrets.ZERODHA_API_KEY }}
      ZERODHA_API_SECRET:   ${{ secrets.ZERODHA_API_SECRET }}
      ZERODHA_ACCESS_TOKEN: ${{ secrets.ZERODHA_ACCESS_TOKEN }}
      TELEGRAM_BOT_TOKEN:   ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID:     ${{ secrets.TELEGRAM_CHAT_ID }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -V
          pip install -r requirements.txt

      - name: Add repo to PYTHONPATH (fix imports)
        run: echo "PYTHONPATH=$GITHUB_WORKSPACE:$PYTHONPATH" >> $GITHUB_ENV

      - name: Verify Kite (optional)
        if: ${{ github.event.inputs.mode == 'online' }}
        continue-on-error: true
        run: python verify_kite.py

      - name: Run backtest
        run: |
          mkdir -p reports logs
          echo "â–¶ Inputs: ${{ toJson(github.event.inputs) }}"
          python tools/run_backtest.py \
            --underlying "${{ github.event.inputs.underlying }}" \
            --start "${{ github.event.inputs.start_date }}" \
            --end "${{ github.event.inputs.end_date }}" \
            --interval "${{ github.event.inputs.interval }}" \
            --capital_rs "${{ github.event.inputs.capital_rs }}" \
            --order_qty "${{ github.event.inputs.order_qty }}" \
            --mode "${{ github.event.inputs.mode }}" \
            --extra_params '${{ github.event.inputs.params_json }}' \
            --out_dir "./reports" \
            | tee logs/backtest.log

      - name: Show reports (preview)
        if: always()
        run: |
          ls -la reports || true
          [ -f reports/metrics.json ] && (echo "----- metrics.json -----"; head -n 80 reports/metrics.json) || true
          [ -f reports/latest.json ] && (echo "----- latest.json (legacy) -----"; head -n 60 reports/latest.json) || true

      - name: Ensure minimal report (never send 'No summary available')
        if: always()
        run: |
          python tools/ensure_metrics.py --dir "./reports"

      - name: Upload artifacts (reports + logs)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backtest-artifacts
          path: |
            reports/**
            logs/**

      - name: Notify Telegram (summary + charts)
        if: always()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID:   ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          python tools/telegram_notify.py --dir reports

name: Backtest

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]
    paths:
      - ".github/workflows/backtest.yml"
      - "bot/**"
      - "core_backtest/**"
      - "strategies/**"
      - "tools/**"
      - "requirements.txt"
  schedule:
    - cron: "15 4 * * 1-5"   # Mon–Fri ~09:45 IST

jobs:
  run-backtest:
    strategy:
      matrix:
        flavour: [loose, strict]   # keep 2 runs
    runs-on: ubuntu-latest
    timeout-minutes: 60

    env:
      ZERODHA_API_KEY:       ${{ secrets.ZERODHA_API_KEY }}
      ZERODHA_API_SECRET:    ${{ secrets.ZERODHA_API_SECRET }}
      ZERODHA_ACCESS_TOKEN:  ${{ secrets.ZERODHA_ACCESS_TOKEN }}
      TELEGRAM_BOT_TOKEN:    ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID:      ${{ secrets.TELEGRAM_CHAT_ID }}
      UNDERLYING: NIFTY
      INTERVAL: "1m"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Make repo importable
        run: echo "PYTHONPATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV

      - name: Compute date range (last 30 days)
        id: dates
        shell: bash
        run: |
          END=$(date -u +%F)
          START=$(date -u -d "$END -30 days" +%F)
          echo "start=$START" >> "$GITHUB_OUTPUT"
          echo "end=$END"   >> "$GITHUB_OUTPUT"

      - name: Run backtest (${{ matrix.flavour }})
        run: |
          mkdir -p reports logs
          python -m tools.run_backtest \
            --underlying "${UNDERLYING}" \
            --start "${{ steps.dates.outputs.start }}" \
            --end   "${{ steps.dates.outputs.end }}" \
            --interval "${INTERVAL}" \
            --capital_rs 100000 \
            --order_qty 1 \
            --outdir ./reports

      - name: Upload artifacts (reports + logs)
        uses: actions/upload-artifact@v4
        with:
          name: backtest-artifacts-${{ matrix.flavour }}
          path: |
            reports/**
            logs/**
          if-no-files-found: warn
          retention-days: 7

      - name: Notify Telegram (Summary + Debug)
        if: ${{ success() }}
        env:
          START: ${{ steps.dates.outputs.start }}
          END:   ${{ steps.dates.outputs.end }}
        run: |
          python - <<'PY'
          import json, os, pathlib
          m = json.load(open("reports/metrics.json","r",encoding="utf-8"))
          # try reading debug
          try:
            dbg = json.load(open("reports/debug.json","r",encoding="utf-8"))
          except Exception:
            dbg = {}
          und   = os.environ.get("UNDERLYING","NIFTY")
          itv   = os.environ.get("INTERVAL","5m")
          start = os.environ.get("START","")
          end   = os.environ.get("END","")
          lines = [
            "Backtest Summary (SUCCESS)",
            f"Underlying: {und}   Interval: {itv}",
            f"Period: {start} -> {end}",
            f"Trades: {m.get('n_trades',0)}   Win-rate: {m.get('win_rate',0)}%",
            f"ROI: {m.get('roi_pct',0)}%   PF: {m.get('profit_factor',0)}",
            f"R:R: {m.get('rr',0)}   Sharpe: {m.get('sharpe_ratio',0)}",
            f"Max DD: {m.get('max_dd_pct',0)}%   Time DD: {m.get('time_dd_bars',0)} bars",
          ]
          if dbg:
            lines += [
              f"Bars: {dbg.get('bars_total',0)}  ATR-bars: {dbg.get('bars_with_atr',0)}",
              f"Setups: long={dbg.get('long_setups',0)} short={dbg.get('short_setups',0)}  Trades taken: {dbg.get('trades_taken',0)}",
            ]
          msg = "\n".join(lines)
          payload = {"chat_id": os.environ["TELEGRAM_CHAT_ID"], "text": msg, "disable_web_page_preview": True}
          pathlib.Path("payload.json").write_text(json.dumps(payload, ensure_ascii=False), encoding="utf-8")
          PY
          curl -s -X POST -H "Content-Type: application/json" \
               -d @payload.json \
               "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" | tee telegram_response.json

      - name: Notify Telegram (Charts)
        if: ${{ success() }}
        run: |
          for img in reports/equity_curve.png reports/drawdown.png; do
            if [ -f "$img" ]; then
              curl -s -F chat_id="${TELEGRAM_CHAT_ID}" -F photo="@$img" \
                   "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendPhoto" > /dev/null
            fi
          done
          # send quick report too if present (optional)
          if [ -f reports/report.md ]; then
            curl -s -F chat_id="${TELEGRAM_CHAT_ID}" -F document="@reports/report.md" \
                 "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendDocument" > /dev/null
          fi

      - name: Notify Telegram (Failure)
        if: ${{ failure() }}
        run: |
          MSG="❌ Backtest FAILED\nRepo: $GITHUB_REPOSITORY\nRun: $GITHUB_RUN_NUMBER\nCommit: $GITHUB_SHA"
          curl -s "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
            -d chat_id="${TELEGRAM_CHAT_ID}" \
            -d text="$MSG"

  # (Optional) tiny job that compares both runs — keep as-is if you already have it
  compare:
    needs: run-backtest
    runs-on: ubuntu-latest
    steps:
      - name: Download loose
        uses: actions/download-artifact@v4
        with:
          name: backtest-artifacts-loose
          path: loose
      - name: Download strict
        uses: actions/download-artifact@v4
        with:
          name: backtest-artifacts-strict
          path: strict
      - name: Compare (loose vs strict) + Telegram
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID:  ${{ secrets.TELEGRAM_CHAT_ID }}
          UNDERLYING: NIFTY
          INTERVAL: "1m"
        run: |
          python - <<'PY'
          import json, os
          def load(p):
            return json.load(open(p,'r',encoding='utf-8')) if os.path.exists(p) else {}
          a = load('loose/reports/metrics.json')
          b = load('strict/reports/metrics.json')
          lines = [
            "Backtest Comparison (loose vs strict)",
            f"Underlying: {os.environ.get('UNDERLYING','NIFTY')}   Interval: {os.environ.get('INTERVAL','1m')}",
            f"Trades: loose={a.get('n_trades',0)} | strict={b.get('n_trades',0)}",
            f"Win-rate %: loose={a.get('win_rate',0)} | strict={b.get('win_rate',0)}",
            f"ROI %: loose={a.get('roi_pct',0)} | strict={b.get('roi_pct',0)}",
            f"PF: loose={a.get('profit_factor',0)} | strict={b.get('profit_factor',0)}",
            f"R:R: loose={a.get('rr',0)} | strict={b.get('rr',0)}",
            f"Max DD %: loose={a.get('max_dd_pct',0)} | strict={b.get('max_dd_pct',0)}",
            f"Time DD (bars): loose={a.get('time_dd_bars',0)} | strict={b.get('time_dd_bars',0)}",
            f"Sharpe: loose={a.get('sharpe_ratio',0)} | strict={b.get('sharpe_ratio',0)}",
            f"Avg hold (min): loose={a.get('avg_hold_minutes',0)} | strict={b.get('avg_hold_minutes',0)}",
          ]
          msg = "\n".join(lines)
          import json, pathlib
          pathlib.Path("payload_cmp.json").write_text(json.dumps({"chat_id": os.environ["TELEGRAM_CHAT_ID"], "text": msg}), encoding="utf-8")
          PY
          curl -s -X POST -H "Content-Type: application/json" -d @payload_cmp.json \
               "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" > /dev/null

      - name: Upload comparison text
        uses: actions/upload-artifact@v4
        with:
          name: backtest-comparison
          path: payload_cmp.json

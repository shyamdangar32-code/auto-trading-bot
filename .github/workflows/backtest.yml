name: backtest

on:
  workflow_dispatch:
    inputs:
      underlying:
        description: "Underlying (NIFTY / BANKNIFTY)"
        required: true
        default: "BANKNIFTY"
      start:
        description: "Start date (YYYY-MM-DD)"
        required: true
        default: "2025-07-01"
      end:
        description: "End date (YYYY-MM-DD)"
        required: true
        default: "2025-08-01"
      interval:
        description: "Candle interval (e.g., 5m, 15m, 1d)"
        required: true
        default: "5m"
      capital_rs:
        description: "Starting capital (₹)"
        required: false
        default: "100000"
      order_qty:
        description: "Order quantity"
        required: false
        default: "1"
      mode:
        description: "Mode (backtest/paper)"
        required: false
        default: "backtest"

jobs:
  run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Install deps
        run: |
          pip install -r requirements.txt

      - name: Add repo to PYTHONPATH
        run: echo "PYTHONPATH=$PWD" >> $GITHUB_ENV

      - name: Run backtest
        id: runbt
        run: |
          mkdir -p reports logs
          python tools/run_backtest.py \
            --underlying "${{ github.event.inputs.underlying || 'BANKNIFTY' }}" \
            --start "${{ github.event.inputs.start || '2025-07-01' }}" \
            --end "${{ github.event.inputs.end || '2025-08-01' }}" \
            --interval "${{ github.event.inputs.interval || '5m' }}" \
            --capital_rs "${{ github.event.inputs.capital_rs || 100000 }}" \
            --order_qty "${{ github.event.inputs.order_qty || 1 }}" \
            --mode "${{ github.event.inputs.mode || 'backtest' }}" \
            --outdir "./reports" \
          || echo "::warning :: Real engine failed → creating minimal report"

      - name: Ensure minimal report (never send 'No summary')
        run: |
          python tools/ensure_report.py --dir "./reports"

      - name: Upload artifacts (reports + logs)
        uses: actions/upload-artifact@v4
        with:
          name: backtest-artifacts
          path: |
            reports/**
            logs/**
          if-no-files-found: warn

      - name: Notify Telegram (summary + charts)
        if: ${{ secrets.TELEGRAM_BOT_TOKEN != '' && secrets.TELEGRAM_CHAT_ID != '' }}
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          python tools/telegram_notify.py --dir "./reports" --title "Backtest Results"

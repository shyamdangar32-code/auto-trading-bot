name: Backtest

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]
    paths:
      - ".github/workflows/backtest.yml"
      - "bot/**"
      - "core_backtest/**"
      - "strategies/**"
      - "tools/**"
      - "requirements.txt"
  schedule:
    - cron: "15 4 * * 1-5"   # Mon–Fri ~09:45 IST (UTC 04:15)

jobs:
  run-backtest:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    env:
      # Secrets
      ZERODHA_API_KEY:       ${{ secrets.ZERODHA_API_KEY }}
      ZERODHA_API_SECRET:    ${{ secrets.ZERODHA_API_SECRET }}
      ZERODHA_ACCESS_TOKEN:  ${{ secrets.ZERODHA_ACCESS_TOKEN }}
      TELEGRAM_BOT_TOKEN:    ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID:      ${{ secrets.TELEGRAM_CHAT_ID }}
      # Defaults for run
      UNDERLYING: NIFTY
      INTERVAL: "5m"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Make repo importable
        run: echo "PYTHONPATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV

      - name: Compute date range (last 30 days)
        id: dates
        shell: bash
        run: |
          END=$(date -u +%F)
          START=$(date -u -d "$END -30 days" +%F)
          echo "start=$START" >> "$GITHUB_OUTPUT"
          echo "end=$END"   >> "$GITHUB_OUTPUT"

      - name: Run backtest
        run: |
          mkdir -p reports logs
          python -m tools.run_backtest \
            --underlying "${UNDERLYING}" \
            --start "${{ steps.dates.outputs.start }}" \
            --end   "${{ steps.dates.outputs.end }}" \
            --interval "${INTERVAL}" \
            --capital_rs 100000 \
            --order_qty 1 \
            --outdir ./reports

      - name: Upload artifacts (reports + logs)
        uses: actions/upload-artifact@v4
        with:
          name: backtest-artifacts
          path: |
            reports/**
            logs/**
          if-no-files-found: warn
          retention-days: 7

      # -------- Telegram summary (plain JSON; logs response) --------
      - name: Notify Telegram (Summary)
        if: ${{ success() }}
        env:
          START: ${{ steps.dates.outputs.start }}
          END:   ${{ steps.dates.outputs.end }}
        run: |
          python - <<'PY'
          import json, os, pathlib
          # read metrics
          m = json.load(open("reports/metrics.json","r",encoding="utf-8"))
          und   = os.environ.get("UNDERLYING","NIFTY")
          itv   = os.environ.get("INTERVAL","5m")
          start = os.environ.get("START","")
          end   = os.environ.get("END","")
          # compose plain text
          lines = [
            "Backtest Summary (SUCCESS)",
            f"Underlying: {und}   Interval: {itv}",
            f"Period: {start} -> {end}",
            f"Trades: {m.get('n_trades',0)}   Win-rate: {m.get('win_rate',0)}%",
            f"ROI: {m.get('roi_pct',0)}%   PF: {m.get('profit_factor',0)}",
            f"R:R: {m.get('rr',0)}   Sharpe: {m.get('sharpe_ratio',0)}",
            f"Max DD: {m.get('max_dd_pct',0)}%   Time DD: {m.get('time_dd_bars',0)} bars",
          ]
          msg = "\n".join(lines)
          payload = {"chat_id": os.environ["TELEGRAM_CHAT_ID"], "text": msg, "disable_web_page_preview": True}
          pathlib.Path("payload.json").write_text(json.dumps(payload, ensure_ascii=False), encoding="utf-8")
          PY

          echo "Sending summary to Telegram…"
          curl -s -X POST -H "Content-Type: application/json" \
               -d @payload.json \
               "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" | tee telegram_response.json
          echo "Telegram response logged above ↑"

      # -------- Telegram charts (if present) --------
      - name: Notify Telegram (Charts)
        if: ${{ success() }}
        run: |
          if [ -f reports/equity_curve.png ]; then
            curl -s -F chat_id="${TELEGRAM_CHAT_ID}" \
                    -F photo="@reports/equity_curve.png" \
                 "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendPhoto"
          fi
          if [ -f reports/drawdown.png ]; then
            curl -s -F chat_id="${TELEGRAM_CHAT_ID}" \
                    -F photo="@reports/drawdown.png" \
                 "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendPhoto"
          fi

      - name: Notify Telegram (Failure)
        if: ${{ failure() }}
        run: |
          MSG="❌ Backtest FAILED\nRepo: $GITHUB_REPOSITORY\nRun: $GITHUB_RUN_NUMBER\nCommit: $GITHUB_SHA"
          curl -s "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
            -d chat_id="${TELEGRAM_CHAT_ID}" \
            -d text="$MSG"
